/* eslint-disable @typescript-eslint/no-explicit-any */
export interface IImageJ {
    io: () => IIOService;
    op: () => IOpService;
    context: () => IImageJContext;
  }

export interface IOpService {
  coloc: () => any;
  context: () => IImageJContext;
  convert: () => any; 
  copy: () => any;
  create: () => any;
  deconvolve: () => any;
  dispose: () => void;
  eval: (evalName: string) => any;
  filter: () => any;
  geom: () => any;
  getClass: () => any;
  getContext: () => IImageJContext;
  getIdentifier: () => string;
  getInfo: () => any;
  getLocation: () => string;
  getPluginService: () => any;
  getPluginType: () => any;
  getPlugins: () => any;
  getPriority: () => number;
  getVersion: () => string;
  haralick: () => any;
  hashCode: () => number;
  help: () => string;
  image: () => any;
  imagemoments: () => any;
  info: (className: any) => any;
  infos: () => any;
  initialize: () => void;
  labeling: () => any;
  lbp: () => any;
  linalg: () => any;
  log: () => any;
  logic: () => any;
  matcher: () => any;
  math: () => any;
  morphology: () => any;
  namespace: (javaClass: any) => any;
  notify: () => any;
  notifyAll: () => any;
  ops: () => any;
  parent: () => any;
  pluginService: () => any;
  registerEventHandlers: () => void;
  run: (methodPath: string, originImg: IImageJDataset, params: any) => IImageJDataset;
  setContext: (context: IImageJContext) => void;
  stats: () => any;
  tamura: () => any;
  thread: () => any;
  threshold: () => any;
  toString: () => string;
  topology: () => any;
  transform: () => any;
  wait: () => any;
  zernike: () => any;
}

export interface IIOService {
  context: () => IImageJContext;
  dispose: () => void;
  getClass: () => any;
  getContext:() => IImageJContext;
  getInfo: () => any;
  getInstances: () => any;
  getLocation: () => string;
  getOpener: (opener: string) => any;
  getPriority: () => number;
  getSaver: (object: any, name: string) => any;
  getType: () => any;
  getVersion: () => string;
  hashCode: () => number;
  initialize: () => void;
  log: () => any;
  open: (path: string) => IImageJDataset;
  save: (dataset: IImageJDataset, path: string) => void; 
  toString: () => string;
}

export interface IImageJDataset {
  axes: (axis: Array<any>) => any;
  context: () => IImageJContext;
  copy: () => IImageJDataset;
  copyDataFrom: (copyFrom: IImageJDataset) => void;
  copyInto: (copyInto: IImageJDataset) => void;
  cursor: () => any;
  decrementReferences: () => any;
  dimension: (axisType: any | number) => number;
  dimensionIndex: (aixsType: any) => number;
  dimensions: (arr: Array<number>) => any;
  duplicate: () => IImageJDataset;
  duplicateBlank: () => IImageJDataset;
  firstElement: () => any;
  getBytesOfInfo:  () => number; 
  getChannelMaximum: (channel: number) => number;
  getChannelMinimum: (channel: number) => number;
  getChannels: () => number;
  getColorTable: (n: number) => any;
  getColorTableCount: () => number;
  getCompositeChannelCount: () => number;
  getContext: () => IImageJContext;
  getDepth: () => number;
  getFrames: () => number;
  getHeight: () => number;
  getImgPlus: () => any;
  getName: () => string;
  getPlane: (nPlane: number, flag?: boolean) => Int8Array;
  getProperties: () => any;
  getSource: () => string;
  getType: () => any;
  getTypeLabelLong: () => string;
  getTypeLabelShort: () => string;
  getValidBits: () => number;
  getWidth: () => number;
  hashCode: () => number;
  incrementReferences: () => any;
  initializeColorTables: (number: number) => any; 
  isDirty: () => boolean;
  isInteger: () => boolean;
  isRGBMerged: () => boolean;
  isSigned: () => boolean;
  iterationOrder: () => any;
  iterator: () => any;
  localizingCursor: () => any;
  max: (input: Array<number> | number) => number
  min: (input: Array<number> | number) => number
  notify: () => any;
  notifyAll: () => any;
  numDimensions: () => number;
  randomAccess: () => any;
  realMax: (input: Array<number> | number) => number
  realMin: (input: Array<number> | number) => number
  rebuild: () => void;
  rgbChange: () => void;
  setAxes: (axis: any) => any; 
  setAxis:  (axis: any) => any; 
  setChannelMaximum: (channel: number, double: number) => void
  setChannelMinimum: (channel: number, double: number) => void
  setColorTable: (colorTable: any, number: number) => any;
  setCompositeChannelCount: (nchannels: number) => void;
  setDirty: (isDirty: boolean) => void
  setImgPlus: (imgPlus: any ) => void;
  setName: (name: string) => void;
  setPlane: (int: number, object: any) => any;
  setPlaneSilently: (int: number, object: any) => any;
  setRGBMerged: (isRGBMerged: boolean) => void; 
  setSource: (source: string) => void;
  setValidBits: (int: number) => void
  size: () => number;
  spliterator: () => any;
  toString: () => string; 
  typeChange: () => void;
  typedImg: (realType: any) => any; 
  update: () => void;
  wait: () => any;
}

export interface IImageJContext {
  dispose: () => void;
  getClass: () => any;
  getPluginIndex: () => any;
  getService: (javaClass: any | string ) => any;
  getServiceIndex: () => any;
  hashCode: () => number;
  inject: (injectService: any) => any;
  isInjectable: (javaClass: any) => boolean;
  isStrict: () => boolean;
  notify: () => any;
  notifyAll: () => any;
  service: (javaClass: any | string) => any;
  setStrict: (isStrict: boolean) => void;
  toString: () => string;
  wait: () => any;
}